name: PR Comment Triggered Playwright Tests

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  run-tests:
    if: ${{ github.event.issue.pull_request != null && contains(github.event.comment.body, '/run-e2e') }}
    runs-on: ubuntu-latest

    steps:
      # ---------------- Checkout Code ----------------
      - uses: actions/checkout@v4

      # ---------------- Setup Node.js ----------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # ---------------- Install dependencies ----------------
      - name: Install dependencies
        run: npm ci

      # ---------------- Install Playwright browsers ----------------
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # ---------------- Run Playwright tests with JSON report ----------------
      - name: Run Playwright tests
        id: playwright
        run: |
          mkdir -p test-results
          npx playwright test --reporter=json > test-results/results.json || true

      # ---------------- Parse Playwright JSON results ----------------
      - name: Parse results
        id: results
        run: |
          results_file="test-results/results.json"
          passed=$(jq '[.. | .status? | select(.=="passed")] | length' $results_file)
          failed=$(jq '[.. | .status? | select(.=="failed")] | length' $results_file)
          skipped=$(jq '[.. | .status? | select(.=="skipped")] | length' $results_file)

          echo "passed=$passed" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT
          echo "skipped=$skipped" >> $GITHUB_OUTPUT

      # ---------------- Comment back on PR in thread ----------------
      - name: Comment back on PR (threaded)
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = context.payload.comment.id; // ID of triggering comment
            const passed = parseInt('${{ steps.results.outputs.passed }}');
            const failed = parseInt('${{ steps.results.outputs.failed }}');
            const skipped = parseInt('${{ steps.results.outputs.skipped }}');

            const body = `âœ… Playwright Tests Finished

            - Passed: **${passed}**
            - Failed: **${failed}**
            - Skipped: **${skipped}**

            ðŸ“Š Full Report: (add GitHub Pages/Allure link here)`;

                        await github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body,
                          in_reply_to: commentId
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---------------- Slack Notification ----------------
      - name: Notify Slack
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data @- ${{ secrets.SLACK_WEBHOOK_URL }} << 'EOF'
          {
            "text": "*Playwright CI Results* ðŸš€\n:white_check_mark: Passed: *${{ steps.results.outputs.passed }}*\n:x: Failed: *${{ steps.results.outputs.failed }}*\n:fast_forward: Skipped: *${{ steps.results.outputs.skipped }}*\n\n*Repo*: ${{ github.repository }}\n*Branch*: ${{ github.ref_name }}\n*Author*: ${{ github.actor }}\n\n:page_facing_up: *HTML Report*: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Download Artifact>\n:page_facing_up: *Allure Report*: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Download Artifact>\n\n:scroll: *Logs*: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
          }
          EOF
